using System;

class Ingredient
{
    public string Name { get; set; }
    public double Quantity { get; set; }
    public string Unit { get; set; }
}

class Step
{
    public string Description { get; set; }
}

class Recipe
{
    private Ingredient[] ingredients;
    private Ingredient[] originalIngredients; // To store original quantities
    private Step[] steps;

    // Method to add ingredients to the recipe
    public void AddIngredients(int numberOfIngredients)
    {
        ingredients = new Ingredient[numberOfIngredients];
        originalIngredients = new Ingredient[numberOfIngredients]; // Initialize original ingredients array

        for (int i = 0; i < numberOfIngredients; i++)
        {
            Console.WriteLine($"Enter name for ingredient {i + 1}: ");
            string name = Console.ReadLine();
            Console.WriteLine($"Enter quantity for ingredient {i + 1}: ");
            double quantity = double.Parse(Console.ReadLine());
            Console.WriteLine($"Enter unit for ingredient {i + 1}: ");
            string unit = Console.ReadLine();
            ingredients[i] = new Ingredient { Name = name, Quantity = quantity, Unit = unit };
            originalIngredients[i] = new Ingredient { Name = name, Quantity = quantity, Unit = unit }; // Store original ingredient
        }
    }

    // Method to add steps to the recipe
    public void AddSteps(int numberOfSteps)
    {
        steps = new Step[numberOfSteps];
        for (int i = 0; i < numberOfSteps; i++)
        {
            Console.WriteLine($"Enter step {i + 1}: ");
            string description = Console.ReadLine();
            steps[i] = new Step { Description = description };
        }
    }

    // Method to display the recipe
    public void DisplayRecipe()
    {
        Console.WriteLine("Ingredients:");
        foreach (var ingredient in ingredients)
        {
            Console.WriteLine($"{ingredient.Quantity} {ingredient.Unit} of {ingredient.Name}");
        }

        Console.WriteLine("\nSteps:");
        for (int i = 0; i < steps.Length; i++)
        {
            Console.WriteLine($"{i + 1}. {steps[i].Description}");
        }
    }

    // Method to scale the recipe by a factor
    public void ScaleRecipe(double factor)
    {
        foreach (var ingredient in ingredients)
        {
            ingredient.Quantity *= factor;
        }
    }

    // Method to reset the quantities to the original values
    public void ResetQuantities()
    {
        for (int i = 0; i < ingredients.Length; i++)
        {
            ingredients[i].Quantity = originalIngredients[i].Quantity; // Reset quantity to original value
        }
    }

    // Method to clear the recipe data
    public void ClearRecipe()
    {
        ingredients = null;
        originalIngredients = null; // Clear original ingredients
        steps = null;
    }
}

class Program
{
    static void Main(string[] args)
    {
        Recipe recipe = new Recipe();

        Console.WriteLine("Enter the number of ingredients: ");
        int numberOfIngredients = int.Parse(Console.ReadLine());
        recipe.AddIngredients(numberOfIngredients);

        Console.WriteLine("Enter the number of steps: ");
        int numberOfSteps = int.Parse(Console.ReadLine());
        recipe.AddSteps(numberOfSteps);

        recipe.DisplayRecipe();

        Console.WriteLine("Enter scaling factor (0.5 for half, 2 for double, 3 for triple): ");
        double factor = double.Parse(Console.ReadLine());
        recipe.ScaleRecipe(factor);
        recipe.DisplayRecipe();

        Console.WriteLine("Reset quantities to original values? (yes/no)");
        string resetInput = Console.ReadLine().ToLower();
        if (resetInput == "yes")
        {
            recipe.ResetQuantities();
            recipe.DisplayRecipe();
        }

        Console.WriteLine("Clear recipe? (yes/no)");
        string clearInput = Console.ReadLine().ToLower();
        if (clearInput == "yes")
        {
            recipe.ClearRecipe();
            Console.WriteLine("Recipe cleared.");
        }
    }
}

